from check_module.check import Check
import re


class Regex(Check):
    """Проверка на условие если значение соответствует регулярному выражению"""
    verbose_name = "соответствует регулярному выражению"

    test_true = [
        # регулярное выражение на значение 'GTVOL_F_12.04.2022_1_1_RX1_35mm'
        (r'GT\D{2,4}_F_\d{2}\.\d{2}\.\d{4}_\d{1}_\d{1}_\w{3,6}_\d{2}mm', 'GTVOL_F_12.04.2022_1_1_RX1_35mm'),
        # регулярное выражение на email
        (r'^[a-z0-9]+[\._]?[a-z0-9]+[@]\w+[.]\w{2,3}$', '89037518701@mail.ru'),
        # регулярное выражение на телефон
        (r'^\+?1?\d{9,15}$', '+79037518701'),
        # регулярное выражение на дату
        (r'^\d{2}\.\d{2}\.\d{4}$', '12.04.2022'),
        # регулярное выражение на дату и время
        (r'^\d{2}\.\d{2}\.\d{4} \d{2}:\d{2}:\d{2}$', '12.04.2022 12:00:00'),
        # регулярное выражение на дату и время в формате ISO
        (r'^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}$', '2022-04-12T12:00:00'),
    ]

    test_false = [
        # регулярное выражение на значение 'GTVOL_F_12.04.2022_1_1_RX1_35mm'
        (r'GT\D{2,4}_F_\d{2}\.\d{2}\.\d{4}_\d{1}_\d{1}_\w{3,6}_\d{2}mm$', 'GTVOL_F_12.04.2022_1_1_RX1_35mm_'),
        # регулярное выражение на email
        (r'^[a-z0-9]+[\._]?[a-z0-9]+[@]\w+[.]\w{2,3}$', '89037518701mail'),
        # регулярное выражение на телефон
        (r'^\+?1?\d{9,15}$', '89037518'),
        # регулярное выражение на дату
        (r'^\d{2}\.\d{2}\.\d{4}$', '32.04.2022 12:00:00'),
        # регулярное выражение на дату и время
        (r'^\d{2}\.\d{2}\.\d{4} \d[1-23]{2}:\d[1-23]{2}:\d[1-23]{2}$', '12.04.2022 25:00:00'),
        # регулярное выражение на дату и время в формате ISO
        (r'^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}$', '2022-13-12T12:00:00Z'),
    ]

    test_exception = [
        (1, 1),
        (1, '1'),
        (None, None),
        (None, 'None'),
    ]

    @staticmethod
    def check(template, value, ignore_case=False) -> bool:
        if isinstance(template, str) and isinstance(value, str):
            return bool(re.match(template, value, flags=re.I if ignore_case else 0))
        else:
            raise TypeError(f"Неверный тип данных: {type(template)} и {type(value)}")


class NotRegex(Check):
    """Проверка на условие если значение не соответствует регулярному выражению"""
    verbose_name = "не соответствует регулярному выражению"

    test_true = [
        # регулярное выражение на значение 'GTVOL_F_12.04.2022_1_1_RX1_35mm'
        (r'GT\D{2,4}_F_\d{2}\.\d{2}\.\d{4}_\d{1}_\d{1}_\w{3,6}_\d{2}mm$', 'GTVOL_F_12.04.2022_1_1_RX1_35mm_'),
        # регулярное выражение на email
        (r'^[a-z0-9]+[\._]?[a-z0-9]+[@]\w+[.]\w{2,3}$', '89037518701mail'),
        # регулярное выражение на телефон
        (r'^\+?1?\d{9,15}$', '89037518'),
        # регулярное выражение на дату
        (r'^\d{2}\.\d{2}\.\d{4}$', '32.04.2022 12:00:00'),
        # регулярное выражение на дату и время
        (r'^\d{2}\.\d{2}\.\d{4} \d[1-23]{2}:\d[1-23]{2}:\d[1-23]{2}$', '12.04.2022 25:00:00'),
        # регулярное выражение на дату и время в формате ISO
        (r'^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}$', '2022-13-12T12:00:00Z'),
    ]

    test_false = [
        # регулярное выражение на значение 'GTVOL_F_12.04.2022_1_1_RX1_35mm'
        (r'GT\D{2,4}_F_\d{2}\.\d{2}\.\d{4}_\d{1}_\d{1}_\w{3,6}_\d{2}mm', 'GTVOL_F_12.04.2022_1_1_RX1_35mm'),
        # регулярное выражение на email
        (r'^[a-z0-9]+[\._]?[a-z0-9]+[@]\w+[.]\w{2,3}$', '89037518701@mail.ru'),
        # регулярное выражение на телефон
        (r'^\+?1?\d{9,15}$', '+79037518701'),
        # регулярное выражение на дату
        (r'^\d{2}\.\d{2}\.\d{4}$', '12.04.2022'),
        # регулярное выражение на дату и время
        (r'^\d{2}\.\d{2}\.\d{4} \d{2}:\d{2}:\d{2}$', '12.04.2022 12:00:00'),
        # регулярное выражение на дату и время в формате ISO
        (r'^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}$', '2022-04-12T12:00:00'),
    ]

    test_exception = [
        (1, 1),
        (1, '1'),
        (None, None),
        (None, 'None'),
    ]

    @staticmethod
    def check(template, value, ignore_case=False) -> bool:
        return not bool(re.match(template, value, flags=re.I if ignore_case else 0))
